|.arch x64
|.section code
|.actionlist actions

void dynasm_translator::prologue()
{
    |  push rbp
    |  mov rbp, rsp
    |  sub rbp, _method->max_locals*8
}

void dynasm_translator::op_const(type t, int64_t value)
{
    |  push value
}

void dynasm_translator::op_load(type t, uint16_t idx)
{
    |  mov rax, [rbp-8*idx]
    |  push rax
}

void dynasm_translator::op_store(type t, uint16_t idx)
{
    |  pop rax
    |  mov [rbp-8*idx], rax
}

void dynasm_translator::op_binary(type t, binop op)
{
    |  pop rdx
    |  pop rax

    switch (t) {
    case type::t_int: {
        switch (op) {
        case binop::op_add:
            |  add eax, edx
            break;
        case binop::op_sub:
            |  sub eax, edx
            break;
        case binop::op_mul:
            |  mul edx
            break;
        case binop::op_div:
            |  mov  ecx, edx
            |  cdq
            |  idiv ecx
            break;
        case binop::op_rem:
            |  mov  ecx, edx
            |  mov  edx, 0
            |  cdq
            |  idiv ecx
            |  mov  edx, eax
            break;
        case binop::op_and:
            |  and eax, edx
            break;
        case binop::op_or:
            |  or eax, edx
            break;
        case binop::op_xor:
            |  xor eax, edx
            break;
        default: assert(0);
        }
        break;
    }
    case type::t_long: {
        switch (op) {
        case binop::op_add:
            |  add rax, rdx
            break;
        case binop::op_sub:
            |  sub rax, rdx
            break;
        case binop::op_mul:
            |  mul rdx
            break;
        case binop::op_div:
            |  mov  rcx, rdx
            |  cdq
            |  idiv rcx
            break;
        case binop::op_rem:
            |  mov  rcx, rdx
            |  mov  rdx, 0
            |  cdq
            |  idiv rcx
            |  mov  rdx, rax
            break;
        case binop::op_and:
            |  and rax, rdx
            break;
        case binop::op_or:
            |  or rax, rdx
            break;
        case binop::op_xor:
            |  xor rax, rdx
            break;
        default: assert(0);
        }
        break;
    }
    default: assert(0);
    }

    |  push rax
}

void dynasm_translator::op_returnvoid()
{
    |  add rbp, _method->max_locals*8
    |  leave
    |  ret
}
